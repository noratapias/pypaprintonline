// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pypaprint.pedidos.domain;

import com.pypaprint.pedidos.domain.Producto;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Producto_Roo_Finder {
    
    public static Long Producto.countFindProductoesByCodigoEquals(String codigo) {
        if (codigo == null || codigo.length() == 0) throw new IllegalArgumentException("The codigo argument is required");
        EntityManager em = Producto.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Producto AS o WHERE o.codigo = :codigo", Long.class);
        q.setParameter("codigo", codigo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Producto> Producto.findProductoesByCodigoEquals(String codigo) {
        if (codigo == null || codigo.length() == 0) throw new IllegalArgumentException("The codigo argument is required");
        EntityManager em = Producto.entityManager();
        TypedQuery<Producto> q = em.createQuery("SELECT o FROM Producto AS o WHERE o.codigo = :codigo", Producto.class);
        q.setParameter("codigo", codigo);
        return q;
    }
    
    public static TypedQuery<Producto> Producto.findProductoesByCodigoEquals(String codigo, String sortFieldName, String sortOrder) {
        if (codigo == null || codigo.length() == 0) throw new IllegalArgumentException("The codigo argument is required");
        EntityManager em = Producto.entityManager();
        String jpaQuery = "SELECT o FROM Producto AS o WHERE o.codigo = :codigo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Producto> q = em.createQuery(jpaQuery, Producto.class);
        q.setParameter("codigo", codigo);
        return q;
    }
    
}
